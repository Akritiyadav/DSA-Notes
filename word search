The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring.
The same letter cell may not be used more than once.
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true


class Solution {
public:
    bool f(int i,int j,int l,vector<vector<char>>& board,string& word) {
        if (i<0||j<0||i==board.size()||j==board[0].size()) return false;
        if (word[l]!=board[i][j]||board[i][j]=='*') return false;
        if (l==word.size()-1) return true;
        char x=board[i][j];
        board[i][j]='*';
        bool up=f(i-1,j,l+1,board,word);
        bool down=f(i+1,j,l+1,board,word);
        bool left=f(i,j-1,l+1,board,word);
        bool right=f(i,j+1,l+1,board,word);
        if (up==true) return true;
        if (down==true) return true;
        if (left==true) return true;
        if (right==true) return true;
        board[i][j]=x;
        return false;
    }
    bool exist(vector<vector<char>>& board, string word) {
        for (int i=0;i<board.size();i++) {
            for (int j=0;j<board[0].size();j++) {
                if (board[i][j]==word[0]) {
                    bool ans=f(i,j,0,board,word);
                    if (ans) return ans;
                }
            }
        }
        return false;
    }
};
