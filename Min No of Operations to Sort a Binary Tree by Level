
class Solution {
private:
    int minSwaps(vector<int>&nums)
	{
	    vector<pair<int,int>> v;
	    int n=nums.size();
	    for(int i=0;i<n;i++)
	    {
	        v.push_back({nums[i],i});
	    }
	    sort(v.begin(),v.end());
	    int swaps=0;
	    for(int i=0;i<n;i++)
	    {
	        if(v[i].second==i) continue;
	        else {
	            swaps++;
	            swap(v[i],v[v[i].second]);
	            i--;
	        }
	    }
	    return swaps;
	}
    
public:
    int minimumOperations(TreeNode* root) {
        queue<TreeNode*> q;
        vector<vector<int>> res;
        
        q.push(root);
        while(!q.empty()){
            int sz = q.size();
            vector<int> v;
            for(int i = 0;i < sz;i++){
                TreeNode* temp = q.front();
                q.pop();
                
                if(temp->left){
                    q.push(temp->left);
                }
                
                if(temp->right){
                    q.push(temp->right);
                }
                v.push_back(temp->val);
            }
            res.push_back(v);
        }
        
        int ans = 0;
        for(int i = 0;i < res.size();i++){
            ans += minSwaps(res[i]);
        }
        return ans;
    }
};
